initSidebarItems({"macro":[["new_key_type","A helper macro to conveniently create new key types. If you use a new key type for each slot map you create you can entirely prevent using the wrong key on the wrong slot map."]],"mod":[["dense","Contains the dense slot map implementation."],["hop","Contains the faster iteration, slower insertion/removal slot map implementation."],["secondary","Contains the secondary map implementation."],["sparse_secondary","Contains the sparse secondary map implementation."]],"struct":[["DefaultKey","The default slot map key type."],["Drain","A draining iterator for `SlotMap`."],["IntoIter","An iterator that moves key-value pairs out of a `SlotMap`."],["Iter","An iterator over the key-value pairs in a `SlotMap`."],["IterMut","A mutable iterator over the key-value pairs in a `SlotMap`."],["KeyData","The actual data stored in a [`Key`]."],["Keys","An iterator over the keys in a `SlotMap`."],["SlotMap","Slot map, storage with stable unique keys."],["Values","An iterator over the values in a `SlotMap`."],["ValuesMut","A mutable iterator over the values in a `SlotMap`."]],"trait":[["Key","Key used to access stored values in a slot map."],["Slottable","A trait for items that can go in a [`SlotMap`] or [`HopSlotMap`]. Due to current stable Rust restrictions a type must be [`Copy`] to be placed in one of those slot maps. This restriction does not apply to [`DenseSlotMap`], [`SecondaryMap`] or [`SparseSecondaryMap`]. It also does not apply if you use nightly Rust and enable the `unstable` feature for `slotmap` by editing your `Cargo.toml`:"]]});