var searchIndex={};
searchIndex["slotmap"] = {"doc":"slotmap","i":[[3,"SlotMap","slotmap","Slot map, storage with stable unique keys.",null,null],[3,"Drain","","A draining iterator for `SlotMap`.",null,null],[3,"IntoIter","","An iterator that moves key-value pairs out of a `SlotMap`.",null,null],[3,"Iter","","An iterator over the key-value pairs in a `SlotMap`.",null,null],[3,"IterMut","","A mutable iterator over the key-value pairs in a `SlotMap`.",null,null],[3,"Keys","","An iterator over the keys in a `SlotMap`.",null,null],[3,"Values","","An iterator over the values in a `SlotMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values in a `SlotMap`.",null,null],[3,"KeyData","","The actual data stored in a [`Key`].",null,null],[3,"DefaultKey","","The default slot map key type.",null,null],[11,"new","","Constructs a new, empty `SlotMap`.",0,[[],["self"]]],[11,"with_capacity","","Creates an empty `SlotMap` with the given capacity.",0,[[["usize"]],["self"]]],[11,"with_key","","Constructs a new, empty `SlotMap` with a custom key type.",0,[[],["self"]]],[11,"with_capacity_and_key","","Creates an empty `SlotMap` with the given capacity and a…",0,[[["usize"]],["self"]]],[11,"len","","Returns the number of elements in the slot map.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns if the slot map is empty.",0,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of elements the `SlotMap` can hold…",0,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",0,[[["self"],["usize"]]]],[11,"contains_key","","Returns `true` if the slot map contains `key`.",0,[[["self"],["k"]],["bool"]]],[11,"insert","","Inserts a value into the slot map. Returns a unique key…",0,[[["self"],["v"]],["k"]]],[11,"insert_with_key","","Inserts a value given by `f` into the slot map. The key…",0,[[["self"],["f"]],["k"]]],[11,"remove","","Removes a key from the slot map, returning the value at…",0,[[["self"],["k"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"clear","","Clears the slot map. Keeps the allocated memory for reuse.",0,[[["self"]]]],[11,"drain","","Clears the slot map, returning all key-value pairs in…",0,[[["self"]],["drain"]]],[11,"get","","Returns a reference to the value corresponding to the key.",0,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked","","Returns a reference to the value corresponding to the key…",0,[[["self"],["k"]],["v"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",0,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value corresponding to…",0,[[["self"],["k"]],["v"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",0,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",0,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",0,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",0,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",0,[[["self"]],["valuesmut"]]],[0,"dense","","Contains the dense slot map implementation.",null,null],[3,"DenseSlotMap","slotmap::dense","Dense slot map, storage with stable unique keys.",null,null],[3,"Drain","","A draining iterator for `DenseSlotMap`.",null,null],[3,"IntoIter","","An iterator that moves key-value pairs out of a…",null,null],[3,"Iter","","An iterator over the key-value pairs in a `DenseSlotMap`.",null,null],[3,"IterMut","","A mutable iterator over the key-value pairs in a…",null,null],[3,"Keys","","An iterator over the keys in a `DenseSlotMap`.",null,null],[3,"Values","","An iterator over the values in a `DenseSlotMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values in a `DenseSlotMap`.",null,null],[11,"new","","Construct a new, empty `DenseSlotMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `DenseSlotMap` with the given capacity.",1,[[["usize"]],[["defaultkey"],["denseslotmap",["defaultkey"]]]]],[11,"with_key","","Constructs a new, empty `DenseSlotMap` with a custom key…",1,[[],["self"]]],[11,"with_capacity_and_key","","Creates an empty `DenseSlotMap` with the given capacity…",1,[[["usize"]],["self"]]],[11,"len","","Returns the number of elements in the slot map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns if the slot map is empty.",1,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of elements the `DenseSlotMap` can hold…",1,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",1,[[["self"],["usize"]]]],[11,"contains_key","","Returns `true` if the slot map contains `key`.",1,[[["self"],["k"]],["bool"]]],[11,"insert","","Inserts a value into the slot map. Returns a unique key…",1,[[["self"],["v"]],["k"]]],[11,"insert_with_key","","Inserts a value given by `f` into the slot map. The key…",1,[[["self"],["f"]],["k"]]],[11,"remove","","Removes a key from the slot map, returning the value at…",1,[[["self"],["k"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"clear","","Clears the slot map. Keeps the allocated memory for reuse.",1,[[["self"]]]],[11,"drain","","Clears the slot map, returning all key-value pairs in…",1,[[["self"]],["drain"]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked","","Returns a reference to the value corresponding to the key…",1,[[["self"],["k"]],["v"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",1,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value corresponding to…",1,[[["self"],["k"]],["v"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",1,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",1,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",1,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",1,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",1,[[["self"]],["valuesmut"]]],[0,"hop","slotmap","Contains the faster iteration, slower insertion/removal…",null,null],[3,"HopSlotMap","slotmap::hop","Hop slot map, storage with stable unique keys.",null,null],[3,"Drain","","A draining iterator for `HopSlotMap`.",null,null],[3,"IntoIter","","An iterator that moves key-value pairs out of a…",null,null],[3,"Iter","","An iterator over the key-value pairs in a `HopSlotMap`.",null,null],[3,"IterMut","","A mutable iterator over the key-value pairs in a…",null,null],[3,"Keys","","An iterator over the keys in a `HopSlotMap`.",null,null],[3,"Values","","An iterator over the values in a `HopSlotMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values in a `HopSlotMap`.",null,null],[11,"new","","Constructs a new, empty `HopSlotMap`.",2,[[],["self"]]],[11,"with_capacity","","Creates an empty `HopSlotMap` with the given capacity.",2,[[["usize"]],["self"]]],[11,"with_key","","Constructs a new, empty `HopSlotMap` with a custom key type.",2,[[],["self"]]],[11,"with_capacity_and_key","","Creates an empty `HopSlotMap` with the given capacity and…",2,[[["usize"]],["self"]]],[11,"len","","Returns the number of elements in the slot map.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns if the slot map is empty.",2,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of elements the `HopSlotMap` can hold…",2,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",2,[[["self"],["usize"]]]],[11,"contains_key","","Returns `true` if the slot map contains `key`.",2,[[["self"],["k"]],["bool"]]],[11,"insert","","Inserts a value into the slot map. Returns a unique key…",2,[[["self"],["v"]],["k"]]],[11,"insert_with_key","","Inserts a value given by `f` into the slot map. The key…",2,[[["self"],["f"]],["k"]]],[11,"remove","","Removes a key from the slot map, returning the value at…",2,[[["self"],["k"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",2,[[["self"],["f"]]]],[11,"clear","","Clears the slot map. Keeps the allocated memory for reuse.",2,[[["self"]]]],[11,"drain","","Clears the slot map, returning all key-value pairs in…",2,[[["self"]],["drain"]]],[11,"get","","Returns a reference to the value corresponding to the key.",2,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked","","Returns a reference to the value corresponding to the key…",2,[[["self"],["k"]],["v"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",2,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value corresponding to…",2,[[["self"],["k"]],["v"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",2,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",2,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",2,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",2,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",2,[[["self"]],["valuesmut"]]],[0,"secondary","slotmap","Contains the secondary map implementation.",null,null],[3,"SecondaryMap","slotmap::secondary","Secondary map, associate data with previously stored…",null,null],[3,"Drain","","A draining iterator for `SecondaryMap`.",null,null],[3,"IntoIter","","An iterator that moves key-value pairs out of a…",null,null],[3,"Iter","","An iterator over the key-value pairs in a `SecondaryMap`.",null,null],[3,"IterMut","","A mutable iterator over the key-value pairs in a…",null,null],[3,"Keys","","An iterator over the keys in a `SecondaryMap`.",null,null],[3,"Values","","An iterator over the values in a `SecondaryMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values in a `SecondaryMap`.",null,null],[11,"new","","Constructs a new, empty `SecondaryMap`.",3,[[],["self"]]],[11,"with_capacity","","Creates an empty `SecondaryMap` with the given capacity of…",3,[[["usize"]],["self"]]],[11,"len","","Returns the number of elements in the secondary map.",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns if the secondary map is empty.",3,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of elements the `SecondaryMap` can hold…",3,[[["self"]],["usize"]]],[11,"set_capacity","","Sets the capacity of the `SecondaryMap` to `new_capacity`,…",3,[[["self"],["usize"]]]],[11,"contains_key","","Returns `true` if the secondary map contains `key`.",3,[[["self"],["k"]],["bool"]]],[11,"insert","","Inserts a value into the secondary map at the given `key`.…",3,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the secondary map, returning the value…",3,[[["self"],["k"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",3,[[["self"],["f"]]]],[11,"clear","","Clears the secondary map. Keeps the allocated memory for…",3,[[["self"]]]],[11,"drain","","Clears the slot map, returning all key-value pairs in…",3,[[["self"]],["drain"]]],[11,"get","","Returns a reference to the value corresponding to the key.",3,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked","","Returns a reference to the value corresponding to the key…",3,[[["self"],["k"]],["v"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",3,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value corresponding to…",3,[[["self"],["k"]],["v"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",3,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",3,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",3,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",3,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",3,[[["self"]],["valuesmut"]]],[0,"sparse_secondary","slotmap","Contains the sparse secondary map implementation.",null,null],[3,"SparseSecondaryMap","slotmap::sparse_secondary","Sparse secondary map, associate data with previously…",null,null],[3,"Drain","","A draining iterator for `SparseSecondaryMap`.",null,null],[3,"IntoIter","","An iterator that moves key-value pairs out of a…",null,null],[3,"Iter","","An iterator over the key-value pairs in a…",null,null],[3,"IterMut","","A mutable iterator over the key-value pairs in a…",null,null],[3,"Keys","","An iterator over the keys in a `SparseSecondaryMap`.",null,null],[3,"Values","","An iterator over the values in a `SparseSecondaryMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values in a…",null,null],[11,"new","","Constructs a new, empty `SparseSecondaryMap`.",4,[[],["self"]]],[11,"with_capacity","","Creates an empty `SparseSecondaryMap` with the given…",4,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty `SparseSecondaryMap` which will use the…",4,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty `SparseSecondaryMap` with the given…",4,[[["s"],["usize"]],["self"]]],[11,"len","","Returns the number of elements in the secondary map.",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns if the secondary map is empty.",4,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of elements the `SparseSecondaryMap`…",4,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more slots in…",4,[[["self"],["usize"]]]],[11,"contains_key","","Returns `true` if the secondary map contains `key`.",4,[[["self"],["k"]],["bool"]]],[11,"insert","","Inserts a value into the secondary map at the given `key`.…",4,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the secondary map, returning the value…",4,[[["self"],["k"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"clear","","Clears the secondary map. Keeps the allocated memory for…",4,[[["self"]]]],[11,"drain","","Clears the slot map, returning all key-value pairs in…",4,[[["self"]],["drain"]]],[11,"get","","Returns a reference to the value corresponding to the key.",4,[[["self"],["k"]],[["v"],["option"]]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",4,[[["self"],["k"]],[["v"],["option"]]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",4,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",4,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",4,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",4,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",4,[[["self"]],["valuesmut"]]],[8,"Slottable","slotmap","A trait for items that can go in a [`SlotMap`] or…",null,null],[8,"Key","","Key used to access stored values in a slot map.",null,null],[11,"null","","Creates a new key that is always invalid and distinct from…",5,[[],["self"]]],[11,"is_null","","Checks if a key is null. There is only a single null key,…",5,[[],["bool"]]],[11,"as_ffi","","Returns the key data as a 64-bit integer. No guarantees…",6,[[],["u64"]]],[11,"from_ffi","","Iff `value` is a value received from `k.as_ffi()`, returns…",6,[[["u64"]],["self"]]],[14,"new_key_type","","A helper macro to conveniently create new key types. If…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"into_iter","","",9,[[],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","slotmap::dense","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"into_iter","","",16,[[],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"into_iter","","",17,[[],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","slotmap::hop","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"into_iter","","",25,[[],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"into_iter","","",26,[[],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"into_iter","","",27,[[],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","slotmap::secondary","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"into_iter","","",29,[[],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"into_iter","","",31,[[],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"into_iter","","",32,[[],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"into_iter","","",33,[[],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"into_iter","","",34,[[],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"into_iter","","",35,[[],["i"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","slotmap::sparse_secondary","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"into_iter","","",36,[[],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"into_iter","","",37,[[],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"into_iter","","",38,[[],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"into_iter","","",39,[[],["i"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"into_iter","","",40,[[],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"into_iter","","",41,[[],["i"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"into_iter","","",42,[[],["i"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"drop","slotmap","",7,[[["self"]]]],[11,"drop","slotmap::dense","",15,[[["self"]]]],[11,"drop","slotmap::hop","",22,[[["self"]]]],[11,"drop","slotmap::secondary","",29,[[["self"]]]],[11,"drop","slotmap::sparse_secondary","",36,[[["self"]]]],[11,"from","slotmap","",14,[[["keydata"]],["self"]]],[11,"from","","",6,[[["defaultkey"]],["self"]]],[11,"extend","slotmap::secondary","",3,[[["self"],["intoiterator"]]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"extend","slotmap::sparse_secondary","",4,[[["self"],["intoiterator"]]]],[11,"extend","","",4,[[["self"],["intoiterator"]]]],[11,"into_iter","slotmap","",0,[[]]],[11,"into_iter","slotmap::dense","",1,[[]]],[11,"into_iter","slotmap::hop","",2,[[]]],[11,"into_iter","slotmap::secondary","",3,[[]]],[11,"into_iter","slotmap::sparse_secondary","",4,[[]]],[11,"next","slotmap","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,[[["self"]]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,[[["self"]]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,[[["self"]]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,[[["self"]]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,[[["self"]]]],[11,"next","","",12,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",12,[[["self"]]]],[11,"next","","",13,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",13,[[["self"]]]],[11,"next","slotmap::dense","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,[[["self"]]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,[[["self"]]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,[[["self"]]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,[[["self"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,[[["self"]]]],[11,"next","","",20,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",20,[[["self"]]]],[11,"next","","",21,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",21,[[["self"]]]],[11,"next","slotmap::hop","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,[[["self"]]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,[[["self"]]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"size_hint","","",24,[[["self"]]]],[11,"next","","",25,[[["self"]],["option"]]],[11,"size_hint","","",25,[[["self"]]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"size_hint","","",26,[[["self"]]]],[11,"next","","",27,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",27,[[["self"]]]],[11,"next","","",28,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",28,[[["self"]]]],[11,"next","slotmap::secondary","",29,[[["self"]],["option"]]],[11,"size_hint","","",29,[[["self"]]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,[[["self"]]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"size_hint","","",31,[[["self"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,[[["self"]]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,[[["self"]]]],[11,"next","","",34,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",34,[[["self"]]]],[11,"next","","",35,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",35,[[["self"]]]],[11,"next","slotmap::sparse_secondary","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,[[["self"]]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,[[["self"]]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,[[["self"]]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,[[["self"]]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,[[["self"]]]],[11,"next","","",41,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",41,[[["self"]]]],[11,"next","","",42,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",42,[[["self"]]]],[11,"clone","slotmap","",0,[[["self"]],["slotmap"]]],[11,"clone","slotmap::dense","",1,[[["self"]],["denseslotmap"]]],[11,"clone","slotmap::hop","",2,[[["self"]],["hopslotmap"]]],[11,"clone","slotmap::secondary","",3,[[["self"]],["secondarymap"]]],[11,"clone","slotmap::sparse_secondary","",4,[[["self"]],["sparsesecondarymap"]]],[11,"clone","slotmap","",6,[[["self"]],["keydata"]]],[11,"clone","","",14,[[["self"]],["defaultkey"]]],[11,"default","","",0,[[],["self"]]],[11,"default","slotmap::dense","",1,[[],["self"]]],[11,"default","slotmap::hop","",2,[[],["self"]]],[11,"default","slotmap::secondary","",3,[[],["self"]]],[11,"default","slotmap::sparse_secondary","",4,[[],["self"]]],[11,"default","slotmap","",6,[[],["self"]]],[11,"default","","",14,[[],["defaultkey"]]],[11,"cmp","","",6,[[["keydata"],["self"]],["ordering"]]],[11,"cmp","","",14,[[["defaultkey"],["self"]],["ordering"]]],[11,"eq","slotmap::secondary","",3,[[["self"]],["bool"]]],[11,"eq","slotmap::sparse_secondary","",4,[[["self"]],["bool"]]],[11,"eq","slotmap","",6,[[["keydata"],["self"]],["bool"]]],[11,"ne","","",6,[[["keydata"],["self"]],["bool"]]],[11,"eq","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"ne","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["keydata"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["keydata"],["self"]],["bool"]]],[11,"le","","",6,[[["keydata"],["self"]],["bool"]]],[11,"gt","","",6,[[["keydata"],["self"]],["bool"]]],[11,"ge","","",6,[[["keydata"],["self"]],["bool"]]],[11,"partial_cmp","","",14,[[["defaultkey"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"le","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"gt","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"ge","","",14,[[["defaultkey"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","slotmap::dense","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","slotmap::hop","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","slotmap::secondary","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","slotmap::sparse_secondary","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","slotmap","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"index","","",0,[[["self"],["k"]],["v"]]],[11,"index","slotmap::dense","",1,[[["self"],["k"]],["v"]]],[11,"index","slotmap::hop","",2,[[["self"],["k"]],["v"]]],[11,"index","slotmap::secondary","",3,[[["self"],["k"]],["v"]]],[11,"index","slotmap::sparse_secondary","",4,[[["self"],["k"]],["v"]]],[11,"index_mut","slotmap","",0,[[["self"],["k"]],["v"]]],[11,"index_mut","slotmap::dense","",1,[[["self"],["k"]],["v"]]],[11,"index_mut","slotmap::hop","",2,[[["self"],["k"]],["v"]]],[11,"index_mut","slotmap::secondary","",3,[[["self"],["k"]],["v"]]],[11,"index_mut","slotmap::sparse_secondary","",4,[[["self"],["k"]],["v"]]],[11,"hash","slotmap","",6,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"from_iter","slotmap::secondary","",3,[[["intoiterator"]],["self"]]],[11,"from_iter","slotmap::sparse_secondary","",4,[[["intoiterator"]],["self"]]]],"p":[[3,"SlotMap"],[3,"DenseSlotMap"],[3,"HopSlotMap"],[3,"SecondaryMap"],[3,"SparseSecondaryMap"],[8,"Key"],[3,"KeyData"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"DefaultKey"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"]]};
searchIndex["smeagol"] = {"doc":"","i":[[3,"Bool8x8","smeagol","A `u64` interpreted as a square grid of boolean values.",null,null],[12,"0","","",0,null],[3,"Rule","","A description of how one state of a cellular automaton…",null,null],[0,"grid","","",null,null],[3,"Grid2","smeagol::grid","A 2 by 2 square grid of values.",null,null],[12,"0","","",1,null],[3,"Grid3","","",null,null],[12,"0","","",2,null],[3,"Grid4","","",null,null],[12,"0","","",3,null],[11,"map","","",1,[[["self"],["f"]],["grid2"]]],[11,"try_map","","",1,[[["self"],["f"]],[["grid2"],["option",["grid2"]]]]],[11,"flatten","","",1,[[["self"]],["grid4"]]],[11,"shrink","","",2,[[["self"],["f"]],[["grid2"],["option",["grid2"]]]]],[11,"shrink","","",3,[[["self"],["f"]],[["option",["grid3"]],["grid3"]]]],[0,"node","smeagol","",null,null],[3,"Level","smeagol::node","A measure of the size of a `Node`.",null,null],[12,"0","","",4,null],[3,"Id","","",null,null],[3,"Leaf","","An 8 by 8 grid of dead or alive cells in a cellular…",null,null],[3,"Branch","","",null,null],[4,"Node","","",null,null],[13,"Leaf","","",5,null],[13,"Branch","","",5,null],[18,"MAX_LEVEL","","The maximum possible level, `Level(63)`.",4,null],[11,"increment","","Attempts to increment the `Level`, returning `None` if the…",4,[[],["option"]]],[11,"max_steps","","",4,[[["self"]],["u64"]]],[11,"children","","",5,[[["self"]],[["option",["grid2"]],["grid2",["id"]]]]],[11,"level","","Returns the level of the `Node`.",5,[[["self"]],["level"]]],[11,"population","","Returns the number of alive cells in the `Node`.",5,[[["self"]],["u128"]]],[11,"evolve","smeagol::grid","",1,[[["rule"],["self"],["u64"]],["leaf"]]],[0,"store","smeagol","",null,null],[3,"Store","smeagol::store","",null,null],[11,"make_leaf","","",6,[[["self"],["leaf"]],[["option",["id"]],["id"]]]],[11,"make_branch","","",6,[[["self"],["grid2",["id"]],["id"]],[["option",["id"]],["id"]]]],[11,"get_node","","",6,[[["self"],["id"]],[["option",["node"]],["node"]]]],[11,"evolve","","",6,[[["grid2",["id"]],["id"],["self"],["u64"]],[["option",["id"]],["id"]]]],[18,"FALSE","smeagol","The `Bool8x8` where all elements are `false`.",0,null],[18,"TRUE","","The `Bool8x8` where all elements are `true`.",0,null],[18,"NORTH","","The `Bool8x8` where the top half is true.",0,null],[18,"SOUTH","","The `Bool8x8` where the bottom half is true.",0,null],[18,"EAST","","The `Bool8x8` where the right half is true.",0,null],[18,"WEST","","The `Bool8x8` where the left half is true.",0,null],[18,"NORTHWEST","","The `Bool8x8` where the top-left quarter is true.",0,null],[18,"NORTHEAST","","The `Bool8x8` where the top-right quarter is true.",0,null],[18,"SOUTHWEST","","The `Bool8x8` where the bottom-left quarter is true.",0,null],[18,"SOUTHEAST","","The `Bool8x8` where the bottom-right quarter is true.",0,null],[18,"CENTER","","The `Bool8x8` where the middle quarter is true.",0,null],[11,"left","","Shifts the `Bool8x8` to the left by the given number of…",0,[[["self"],["u8"]],["self"]]],[11,"right","","Shifts the `Bool8x8` to the right by the given number of…",0,[[["self"],["u8"]],["self"]]],[11,"up","","Shifts the `Bool8x8` up by the given number of steps.",0,[[["self"],["u8"]],["self"]]],[11,"down","","Shifts the `Bool8x8` down by the given number of steps.",0,[[["self"],["u8"]],["self"]]],[11,"sum","","Performs a bitwise sum of the given `Bool8x8`s.",0,[[]]],[11,"new","","Creates a new `Rule` using B/S notation.",7,[[],["self"]]],[11,"step","","Evolves a `Bool8x8` to its next state, treating `true` as…",7,[[["self"],["bool8x8"]],["bool8x8"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","smeagol::grid","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","smeagol::node","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","smeagol::store","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","smeagol::node","",8,[[["keydata"]],["self"]]],[11,"clone","smeagol::grid","",1,[[["self"]],["grid2"]]],[11,"clone","","",2,[[["self"]],["grid3"]]],[11,"clone","","",3,[[["self"]],["grid4"]]],[11,"clone","smeagol::node","",4,[[["self"]],["level"]]],[11,"clone","","",8,[[["self"]],["id"]]],[11,"clone","","",5,[[["self"]],["node"]]],[11,"clone","","",9,[[["self"]],["leaf"]]],[11,"clone","","",10,[[["self"]],["branch"]]],[11,"clone","smeagol::store","",6,[[["self"]],["store"]]],[11,"clone","smeagol","",0,[[["self"]],["bool8x8"]]],[11,"clone","","",7,[[["self"]],["rule"]]],[11,"default","smeagol::node","",8,[[],["id"]]],[11,"default","smeagol","",0,[[],["bool8x8"]]],[11,"cmp","smeagol::grid","",1,[[["grid2"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["grid3"],["self"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["grid4"]],["ordering"]]],[11,"cmp","smeagol::node","",4,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["id"]],["ordering"]]],[11,"cmp","","",9,[[["leaf"],["self"]],["ordering"]]],[11,"cmp","smeagol","",0,[[["bool8x8"],["self"]],["ordering"]]],[11,"eq","smeagol::grid","",1,[[["grid2"],["self"]],["bool"]]],[11,"ne","","",1,[[["grid2"],["self"]],["bool"]]],[11,"eq","","",2,[[["grid3"],["self"]],["bool"]]],[11,"ne","","",2,[[["grid3"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["grid4"]],["bool"]]],[11,"ne","","",3,[[["self"],["grid4"]],["bool"]]],[11,"eq","smeagol::node","",4,[[["self"],["level"]],["bool"]]],[11,"ne","","",4,[[["self"],["level"]],["bool"]]],[11,"eq","","",8,[[["self"],["id"]],["bool"]]],[11,"ne","","",8,[[["self"],["id"]],["bool"]]],[11,"eq","","",5,[[["node"],["self"]],["bool"]]],[11,"ne","","",5,[[["node"],["self"]],["bool"]]],[11,"eq","","",9,[[["leaf"],["self"]],["bool"]]],[11,"ne","","",9,[[["leaf"],["self"]],["bool"]]],[11,"eq","","",10,[[["self"],["branch"]],["bool"]]],[11,"ne","","",10,[[["self"],["branch"]],["bool"]]],[11,"eq","smeagol","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"ne","","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"partial_cmp","smeagol::grid","",1,[[["grid2"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["grid2"],["self"]],["bool"]]],[11,"le","","",1,[[["grid2"],["self"]],["bool"]]],[11,"gt","","",1,[[["grid2"],["self"]],["bool"]]],[11,"ge","","",1,[[["grid2"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["grid3"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["grid3"],["self"]],["bool"]]],[11,"le","","",2,[[["grid3"],["self"]],["bool"]]],[11,"gt","","",2,[[["grid3"],["self"]],["bool"]]],[11,"ge","","",2,[[["grid3"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["grid4"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["self"],["grid4"]],["bool"]]],[11,"le","","",3,[[["self"],["grid4"]],["bool"]]],[11,"gt","","",3,[[["self"],["grid4"]],["bool"]]],[11,"ge","","",3,[[["self"],["grid4"]],["bool"]]],[11,"partial_cmp","smeagol::node","",4,[[["self"],["level"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",4,[[["self"],["level"]],["bool"]]],[11,"le","","",4,[[["self"],["level"]],["bool"]]],[11,"gt","","",4,[[["self"],["level"]],["bool"]]],[11,"ge","","",4,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["id"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["self"],["id"]],["bool"]]],[11,"le","","",8,[[["self"],["id"]],["bool"]]],[11,"gt","","",8,[[["self"],["id"]],["bool"]]],[11,"ge","","",8,[[["self"],["id"]],["bool"]]],[11,"partial_cmp","","",9,[[["leaf"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["leaf"],["self"]],["bool"]]],[11,"le","","",9,[[["leaf"],["self"]],["bool"]]],[11,"gt","","",9,[[["leaf"],["self"]],["bool"]]],[11,"ge","","",9,[[["leaf"],["self"]],["bool"]]],[11,"partial_cmp","smeagol","",0,[[["bool8x8"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"le","","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"gt","","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"ge","","",0,[[["bool8x8"],["self"]],["bool"]]],[11,"fmt","smeagol::grid","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","smeagol::node","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","smeagol","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"not","","",0,[[],["self"]]],[11,"bitand","","",0,[[],["self"]]],[11,"bitor","","",0,[[],["self"]]],[11,"bitxor","","",0,[[],["self"]]],[11,"hash","smeagol::grid","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","smeagol::node","",4,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","smeagol","",0,[[["self"],["__h"]]]]],"p":[[3,"Bool8x8"],[3,"Grid2"],[3,"Grid3"],[3,"Grid4"],[3,"Level"],[4,"Node"],[3,"Store"],[3,"Rule"],[3,"Id"],[3,"Leaf"],[3,"Branch"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);