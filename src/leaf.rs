// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::{
    bool8x8::{Adder, Bool8x8},
    Rule,
};

/// An 8 by 8 grid of dead or alive cells.
///
/// Dead:
/// ```txt
/// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠  ╌  ╌ ╌  ╌ ╌  ╌ ╌   ╌ ╌  ╌ ╌  ╌ ╌  ╌  ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
/// ```
///
/// ```txt
/// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ██ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ██   ░░   ░░   ░░ ┃
/// ┠  ╌  ╌ ╌  ╌ ╌  ╌ ╌   ╌ ╌  ╌ ╌  ╌ ╌  ╌  ┨
/// ┃ ░░   ░░   ██   ██ ╎ ██   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┠                   ╎                   ┨
/// ┃ ░░   ░░   ░░   ░░ ╎ ░░   ░░   ░░   ░░ ┃
/// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
/// ```
#[derive(Clone, Copy, Debug)]
pub struct Leaf {
    alive: Bool8x8,
}

impl Leaf {
    /// # Examples
    ///
    /// ```
    /// # use smeagol::{leaf::Leaf, bool8x8::Bool8x8};
    /// let leaf = Leaf::new(Bool8x8(0x80C0_E3F0_0528_327C));
    /// ```
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃ ▓▓                ╎                   ┃  0x80 = 1000 0000
    /// ┠                   ╎                   ┨
    /// ┃ ▓▓   ▓▓           ╎                   ┃  0xC0 = 1100 0000
    /// ┠                   ╎                   ┨
    /// ┃ ▓▓   ▓▓   ▓▓      ╎           ▓▓   ▓▓ ┃  0xE3 = 1110 0011
    /// ┠                   ╎                   ┨
    /// ┃ ▓▓   ▓▓   ▓▓   ▓▓ ╎                   ┃  0xF0 = 1111 0000
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎      ▓▓        ▓▓ ┃  0x05 = 0000 0101
    /// ┠                   ╎                   ┨
    /// ┃           ▓▓      ╎ ▓▓                ┃  0x28 = 0010 1000
    /// ┠                   ╎                   ┨
    /// ┃           ▓▓   ▓▓ ╎           ▓▓      ┃  0x32 = 0011 0010
    /// ┠                   ╎                   ┨
    /// ┃      ▓▓   ▓▓   ▓▓ ╎ ▓▓   ▓▓           ┃  0x7C = 0111 1100
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn new(alive: Bool8x8) -> Self {
        Self { alive }
    }

    pub const fn dead() -> Self {
        Self {
            alive: Bool8x8::FALSE,
        }
    }

    pub const fn alive() -> Self {
        Self {
            alive: Bool8x8::TRUE,
        }
    }

    pub const fn step(self, rule: Rule) -> Self {
        let alive = self.alive;
        let dead = alive.not();

        let neighbors = Adder::new()
            .add(alive.up(1))
            .add(alive.down(1))
            .add(alive.left(1))
            .add(alive.right(1))
            .add(alive.up(1).left(1))
            .add(alive.up(1).right(1))
            .add(alive.down(1).left(1))
            .add(alive.left(1).right(1))
            .sum();

        Self::new(
            Bool8x8::FALSE
                .or(dead.and(rule.birth[0]).and(neighbors[0]))
                .or(dead.and(rule.birth[1]).and(neighbors[1]))
                .or(dead.and(rule.birth[2]).and(neighbors[2]))
                .or(dead.and(rule.birth[3]).and(neighbors[3]))
                .or(dead.and(rule.birth[4]).and(neighbors[4]))
                .or(dead.and(rule.birth[5]).and(neighbors[5]))
                .or(dead.and(rule.birth[6]).and(neighbors[6]))
                .or(dead.and(rule.birth[7]).and(neighbors[7]))
                .or(dead.and(rule.birth[8]).and(neighbors[8]))
                .or(alive.and(rule.survival[0]).and(neighbors[0]))
                .or(alive.and(rule.survival[1]).and(neighbors[1]))
                .or(alive.and(rule.survival[2]).and(neighbors[2]))
                .or(alive.and(rule.survival[3]).and(neighbors[3]))
                .or(alive.and(rule.survival[4]).and(neighbors[4]))
                .or(alive.and(rule.survival[5]).and(neighbors[5]))
                .or(alive.and(rule.survival[6]).and(neighbors[6]))
                .or(alive.and(rule.survival[7]).and(neighbors[7]))
                .or(alive.and(rule.survival[8]).and(neighbors[8])),
        )
    }
}

/// A macrocell.
///
/// ```text
/// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┠                   ╎                   ┃                   ╎                   ┨
/// ┃                   ╎                   ┃                   ╎                   ┃
/// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
/// ```
#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Macrocell<T> {
    pub nw: T,
    pub ne: T,
    pub sw: T,
    pub se: T,
}

impl Macrocell<Leaf> {
    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_nw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_3F3F_3F3F_3F3F);
        let mask_ne = Bool8x8(0x0000_C0C0_C0C0_C0C0);
        let mask_sw = Bool8x8(0x3F3F_0000_0000_0000);
        let mask_se = Bool8x8(0xC0C0_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(2))
                .or(self.ne.alive.and(mask_ne).up(2).right(6))
                .or(self.sw.alive.and(mask_sw).down(6).left(2))
                .or(self.se.alive.and(mask_se).down(6).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_ne_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0303_0303_0303);
        let mask_ne = Bool8x8(0x0000_FCFC_FCFC_FCFC);
        let mask_sw = Bool8x8(0x0303_0000_0000_0000);
        let mask_se = Bool8x8(0xFCFC_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(6))
                .or(self.ne.alive.and(mask_ne).up(2).right(2))
                .or(self.sw.alive.and(mask_sw).down(6).left(6))
                .or(self.se.alive.and(mask_se).down(6).right(2)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_sw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_3F3F);
        let mask_ne = Bool8x8(0x0000_0000_0000_C0C0);
        let mask_sw = Bool8x8(0x3F3F_3F3F_3F3F_0000);
        let mask_se = Bool8x8(0xC0C0_C0C0_C0C0_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(2))
                .or(self.ne.alive.and(mask_ne).up(6).right(6))
                .or(self.sw.alive.and(mask_sw).down(2).left(2))
                .or(self.se.alive.and(mask_se).down(2).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_se_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_0303);
        let mask_ne = Bool8x8(0x0000_0000_0000_FCFC);
        let mask_sw = Bool8x8(0x0303_0303_0303_0000);
        let mask_se = Bool8x8(0xFCFC_FCFC_FCFC_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(6))
                .or(self.ne.alive.and(mask_ne).up(6).right(2))
                .or(self.sw.alive.and(mask_sw).down(2).left(6))
                .or(self.se.alive.and(mask_se).down(2).right(2)),
        )
    }
}

#[cfg(test)]
mod tests {}
