// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::leaf::Leaf;

/// A macrocell.
#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Macrocell<T> {
    pub nw: T,
    pub ne: T,
    pub sw: T,
    pub se: T,
}

pub type Macrocell2<T> = Macrocell<Macrocell<T>>;
pub type Macrocell3<T> = Macrocell<Macrocell2<T>>;

impl Macrocell<Leaf> {
    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_nw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_3F3F_3F3F_3F3F);
        let mask_ne = Bool8x8(0x0000_C0C0_C0C0_C0C0);
        let mask_sw = Bool8x8(0x3F3F_0000_0000_0000);
        let mask_se = Bool8x8(0xC0C0_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(2))
                .or(self.ne.alive.and(mask_ne).up(2).right(6))
                .or(self.sw.alive.and(mask_sw).down(6).left(2))
                .or(self.se.alive.and(mask_se).down(6).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_ne_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0303_0303_0303);
        let mask_ne = Bool8x8(0x0000_FCFC_FCFC_FCFC);
        let mask_sw = Bool8x8(0x0303_0000_0000_0000);
        let mask_se = Bool8x8(0xFCFC_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(6))
                .or(self.ne.alive.and(mask_ne).up(2).right(2))
                .or(self.sw.alive.and(mask_sw).down(6).left(6))
                .or(self.se.alive.and(mask_se).down(6).right(2)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_sw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_3F3F);
        let mask_ne = Bool8x8(0x0000_0000_0000_C0C0);
        let mask_sw = Bool8x8(0x3F3F_3F3F_3F3F_0000);
        let mask_se = Bool8x8(0xC0C0_C0C0_C0C0_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(2))
                .or(self.ne.alive.and(mask_ne).up(6).right(6))
                .or(self.sw.alive.and(mask_sw).down(2).left(2))
                .or(self.se.alive.and(mask_se).down(2).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_se_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_0303);
        let mask_ne = Bool8x8(0x0000_0000_0000_FCFC);
        let mask_sw = Bool8x8(0x0303_0303_0303_0000);
        let mask_se = Bool8x8(0xFCFC_FCFC_FCFC_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(6))
                .or(self.ne.alive.and(mask_ne).up(6).right(2))
                .or(self.sw.alive.and(mask_sw).down(2).left(6))
                .or(self.se.alive.and(mask_se).down(2).right(2)),
        )
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct NodeId {
    index: usize,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum Node {
    Leaf(Leaf),
    Interior {
        children: Macrocell<NodeId>,
        level: u8,
    },
}

pub struct NodeStore {
    data: Vec<Node>,
}

impl NodeStore {
    fn get(&self, id: NodeId) -> Option<Node> {
        self.data.get(id.index).copied()
    }
}

#[cfg(test)]
mod tests {}
