// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::leaf::{Bool8x8, Leaf};
use std::collections::HashMap;

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Level(u8);

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct NodeId {
    index: usize,
}

impl NodeId {
    fn new(index: usize) -> Self {
        Self { index }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
pub enum Node {
    Leaf(Leaf),
    Interior {
        children: Macrocell<NodeId>,
        level: Level,
    },
}

impl Node {
    pub fn level(&self) -> Level {
        match self {
            Node::Leaf(_) => Level(3),
            Node::Interior { level, .. } => *level,
        }
    }
}

pub struct NodeStore {
    lookup: HashMap<Node, NodeId>,
    nodes: Vec<Node>,
}

impl NodeStore {
    fn new_leaf(&mut self, leaf: Leaf) -> NodeId {
        self.get_id(Node::Leaf(leaf))
    }

    fn new_interior(&mut self, children: Macrocell<NodeId>) -> NodeId {
        todo!()
    }

    fn get_id(&mut self, node: Node) -> NodeId {
        if let Some(&id) = self.lookup.get(&node) {
            id
        } else {
            let id = NodeId::new(self.nodes.len());
            self.lookup.insert(node, id);
            id
        }
    }

    fn children(&self, id: NodeId) -> Macrocell<Node> {
        todo!()
    }

    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃  NW     ╎  NW     ╎  NW     ╎  NW     ┃  NE     ╎  NE     ╎  NE     ╎  NE     ┃
    /// ┠   nw    ╎   nw    ╎   ne    ╎   ne    ┃   nw    ╎   nw    ╎   ne    ╎   ne    ┨
    /// ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┨
    /// ┃  NW     ╎  NW     ╎  NW     ╎  NW     ┃  NE     ╎  NE     ╎  NE     ╎  NE     ┃
    /// ┠   nw    ╎   nw    ╎   ne    ╎   ne    ┃   nw    ╎   nw    ╎   ne    ╎   ne    ┨
    /// ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃  NW     ╎  NW     ╎  NW     ╎  NW     ┃  NE     ╎  NE     ╎  NE     ╎  NE     ┃
    /// ┠   sw    ╎   sw    ╎   se    ╎   se    ┃   sw    ╎   sw    ╎   se    ╎   se    ┨
    /// ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┨
    /// ┃  NW     ╎  NW     ╎  NW     ╎  NW     ┃  NE     ╎  NE     ╎  NE     ╎  NE     ┃
    /// ┠   sw    ╎   sw    ╎   se    ╎   se    ┃   sw    ╎   sw    ╎   se    ╎   se    ┨
    /// ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃  SW     ╎  SW     ╎  SW     ╎  SW     ┃  SE     ╎  SE     ╎  SE     ╎  SE     ┃
    /// ┠   nw    ╎   nw    ╎   ne    ╎   ne    ┃   nw    ╎   nw    ╎   ne    ╎   ne    ┨
    /// ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┨
    /// ┃  SW     ╎  SW     ╎  SW     ╎  SW     ┃  SE     ╎  SE     ╎  SE     ╎  SE     ┃
    /// ┠   nw    ╎   nw    ╎   ne    ╎   ne    ┃   nw    ╎   nw    ╎   ne    ╎   ne    ┨
    /// ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃  SW     ╎  SW     ╎  SW     ╎  SW     ┃  SE     ╎  SE     ╎  SE     ╎  SE     ┃
    /// ┠   sw    ╎   sw    ╎   se    ╎   se    ┃   sw    ╎   sw    ╎   se    ╎   se    ┨
    /// ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃    ⁿʷ   ╎    ⁿᵉ   ╎    ⁿʷ   ╎    ⁿᵉ   ┃
    /// ┠ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ╎ ╌ ╌ ╌ ╌ + ╌ ╌ ╌ ╌ ┨
    /// ┃  SW     ╎  SW     ╎  SW     ╎  SW     ┃  SE     ╎  SE     ╎  SE     ╎  SE     ┃
    /// ┠   sw    ╎   sw    ╎   se    ╎   se    ┃   sw    ╎   sw    ╎   se    ╎   se    ┨
    /// ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃    ˢʷ   ╎    ˢᵉ   ╎    ˢʷ   ╎    ˢᵉ   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    fn evolve(&mut self, id: NodeId) -> NodeId {
        todo!()
    }
}

/// A macrocell.
#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Macrocell<T> {
    /// The northwest child.
    pub nw: T,
    /// The northeast child.
    pub ne: T,
    /// The southwest child.
    pub sw: T,
    /// The southeast child.
    pub se: T,
}

pub type Macrocell2<T> = Macrocell<Macrocell<T>>;
pub type Macrocell3<T> = Macrocell<Macrocell2<T>>;

impl Macrocell<Leaf> {
    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_nw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_3F3F_3F3F_3F3F);
        let mask_ne = Bool8x8(0x0000_C0C0_C0C0_C0C0);
        let mask_sw = Bool8x8(0x3F3F_0000_0000_0000);
        let mask_se = Bool8x8(0xC0C0_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(2))
                .or(self.ne.alive.and(mask_ne).up(2).right(6))
                .or(self.sw.alive.and(mask_sw).down(6).left(2))
                .or(self.se.alive.and(mask_se).down(6).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_ne_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0303_0303_0303);
        let mask_ne = Bool8x8(0x0000_FCFC_FCFC_FCFC);
        let mask_sw = Bool8x8(0x0303_0000_0000_0000);
        let mask_se = Bool8x8(0xFCFC_0000_0000_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(2).left(6))
                .or(self.ne.alive.and(mask_ne).up(2).right(2))
                .or(self.sw.alive.and(mask_sw).down(6).left(6))
                .or(self.se.alive.and(mask_se).down(6).right(2)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠         ┌─────────────────────────────╂─────────┐         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┣━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┨
    /// ┃         │ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ ┃ ░░░░░░░ │         ╎                   ┃
    /// ┠         └─────────────────────────────╂─────────┘         ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_sw_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_3F3F);
        let mask_ne = Bool8x8(0x0000_0000_0000_C0C0);
        let mask_sw = Bool8x8(0x3F3F_3F3F_3F3F_0000);
        let mask_se = Bool8x8(0xC0C0_C0C0_C0C0_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(2))
                .or(self.ne.alive.and(mask_ne).up(6).right(6))
                .or(self.sw.alive.and(mask_sw).down(2).left(2))
                .or(self.se.alive.and(mask_se).down(2).right(6)),
        )
    }

    /// Foo bar.
    ///
    /// ```text
    /// ┏━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┳━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┓
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┃ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎         ┌─────────╂─────────────────────────────┐         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━┫
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌ ╌   ╌ ╌ ╌ ╌ │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │ ╌ ╌ ╌ ╌ ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┨
    /// ┃                   ╎         │ ░░░░░░░ ┃ ░░░░░░░░░░░░░░░░░░░░░░░░░░░ │         ┃
    /// ┠                   ╎         └─────────╂─────────────────────────────┘         ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┠                   ╎                   ┃                   ╎                   ┨
    /// ┃                   ╎                   ┃                   ╎                   ┃
    /// ┗━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┻━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┷━━━━┛
    /// ```
    pub const fn center_se_leaf(self) -> Leaf {
        let mask_nw = Bool8x8(0x0000_0000_0000_0303);
        let mask_ne = Bool8x8(0x0000_0000_0000_FCFC);
        let mask_sw = Bool8x8(0x0303_0303_0303_0000);
        let mask_se = Bool8x8(0xFCFC_FCFC_FCFC_0000);
        Leaf::new(
            Bool8x8::FALSE
                .or(self.nw.alive.and(mask_nw).up(6).left(6))
                .or(self.ne.alive.and(mask_ne).up(6).right(2))
                .or(self.sw.alive.and(mask_sw).down(2).left(6))
                .or(self.se.alive.and(mask_se).down(2).right(2)),
        )
    }
}

#[cfg(test)]
mod tests {}
